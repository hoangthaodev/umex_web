"use server";
import {
  getAllConfig,
  getConfigFromAllConfigByKey,
} from "@/actions/config.action";
import { getImageById } from "@/actions/image.action";
import { ConfigType } from "@/lib/types";

type MetadataType = {
  title?: string;
  description?: string;
  icons?: {
    rel: string;
    type?: string;
    url: string;
    sizes?: string;
  }[];
  openGraph?: {
    type: string;
    url: string;
    title: string;
    description?: string;
    images?: {
      url: string;
      alt: string;
      width: number;
      height: number;
    }[];
  };
  twitter?: {
    handle: string;
    site: string;
    cardType: string;
  };
  canonical?: string;
};

export const generateMetadata = async ({
  title,
  description,
  openGraph,
  twitter,
  icons,
}: MetadataType) => {
  const meta: ConfigType[] = await getAllConfig();
  const siteName = await getConfigFromAllConfigByKey(meta, "site_name");
  const siteDescription = await getConfigFromAllConfigByKey(
    meta,
    "site_description"
  );
  const siteFavicon = await getConfigFromAllConfigByKey(meta, "site_favicon");
  const favicon = await getImageById(Number(siteFavicon?.config_value));
  return {
    metadataBase: new URL(process.env.NEXT_PUBLIC_BASE_URL || ""),
    title: title || siteName?.config_value,
    description: description || siteDescription?.config_value,
    openGraph: openGraph || {
      type: "website",
      url: "https://nextjs.org",
      title: "Create Next App",
      description: "Generated by create next app",
      images: [
        {
          url: "/preview.jpg",
          alt: "Preview image",
          width: 1200,
          height: 630,
        },
      ],
    },
    twitter: twitter || {
      handle: "@vercel",
      site: "@vercel",
      cardType: "summary_large_image",
    },
    icons: icons || [
      {
        url: favicon?.img_src,
        rel: "icon",
        type: "image/x-icon",
      },
    ],
  };
};
