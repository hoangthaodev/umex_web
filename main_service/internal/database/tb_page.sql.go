// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: tb_page.sql

package database

import (
	"context"
)

const createNewPage = `-- name: CreateNewPage :exec
insert into tb_page(
  page_title,
  page_slug,
  page_content,
  page_description,
  page_status,
  page_publish_year,
  page_publish_month,
  page_publish_day,
  page_feature_image,
  page_trash,
  user_id,
  type_id,
  template_id,
  created_at
) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?)
`

type CreateNewPageParams struct {
	PageTitle        string
	PageSlug         string
	PageContent      string
	PageDescription  string
	PageStatus       int32
	PagePublishYear  int32
	PagePublishMonth int32
	PagePublishDay   int32
	PageFeatureImage int64
	PageTrash        int32
	UserID           int64
	TypeID           int64
	TemplateID       int32
	CreatedAt        int64
}

func (q *Queries) CreateNewPage(ctx context.Context, arg CreateNewPageParams) error {
	_, err := q.db.ExecContext(ctx, createNewPage,
		arg.PageTitle,
		arg.PageSlug,
		arg.PageContent,
		arg.PageDescription,
		arg.PageStatus,
		arg.PagePublishYear,
		arg.PagePublishMonth,
		arg.PagePublishDay,
		arg.PageFeatureImage,
		arg.PageTrash,
		arg.UserID,
		arg.TypeID,
		arg.TemplateID,
		arg.CreatedAt,
	)
	return err
}

const deletePage = `-- name: DeletePage :exec
delete from tb_page where page_id = ?
`

func (q *Queries) DeletePage(ctx context.Context, pageID int64) error {
	_, err := q.db.ExecContext(ctx, deletePage, pageID)
	return err
}

const getAllPage = `-- name: GetAllPage :many
select page_id, page_title, page_slug, page_content, page_description, page_status, page_publish_year, page_publish_month, page_publish_day, page_feature_image, page_trash, user_id, type_id, template_id, created_at, updated_at from tb_page limit ? offset ?
`

type GetAllPageParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) GetAllPage(ctx context.Context, arg GetAllPageParams) ([]TbPage, error) {
	rows, err := q.db.QueryContext(ctx, getAllPage, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TbPage
	for rows.Next() {
		var i TbPage
		if err := rows.Scan(
			&i.PageID,
			&i.PageTitle,
			&i.PageSlug,
			&i.PageContent,
			&i.PageDescription,
			&i.PageStatus,
			&i.PagePublishYear,
			&i.PagePublishMonth,
			&i.PagePublishDay,
			&i.PageFeatureImage,
			&i.PageTrash,
			&i.UserID,
			&i.TypeID,
			&i.TemplateID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPageById = `-- name: GetPageById :one
select page_id, page_title, page_slug, page_content, page_description, page_status, page_publish_year, page_publish_month, page_publish_day, page_feature_image, page_trash, user_id, type_id, template_id, created_at, updated_at from tb_page where page_id = ?
`

func (q *Queries) GetPageById(ctx context.Context, pageID int64) (TbPage, error) {
	row := q.db.QueryRowContext(ctx, getPageById, pageID)
	var i TbPage
	err := row.Scan(
		&i.PageID,
		&i.PageTitle,
		&i.PageSlug,
		&i.PageContent,
		&i.PageDescription,
		&i.PageStatus,
		&i.PagePublishYear,
		&i.PagePublishMonth,
		&i.PagePublishDay,
		&i.PageFeatureImage,
		&i.PageTrash,
		&i.UserID,
		&i.TypeID,
		&i.TemplateID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPageByPublishYear = `-- name: GetPageByPublishYear :many
select page_id, page_title, page_slug, page_content, page_description, page_status, page_publish_year, page_publish_month, page_publish_day, page_feature_image, page_trash, user_id, type_id, template_id, created_at, updated_at from tb_page where page_publish_year = ? limit ? offset ?
`

type GetPageByPublishYearParams struct {
	PagePublishYear int32
	Limit           int32
	Offset          int32
}

func (q *Queries) GetPageByPublishYear(ctx context.Context, arg GetPageByPublishYearParams) ([]TbPage, error) {
	rows, err := q.db.QueryContext(ctx, getPageByPublishYear, arg.PagePublishYear, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TbPage
	for rows.Next() {
		var i TbPage
		if err := rows.Scan(
			&i.PageID,
			&i.PageTitle,
			&i.PageSlug,
			&i.PageContent,
			&i.PageDescription,
			&i.PageStatus,
			&i.PagePublishYear,
			&i.PagePublishMonth,
			&i.PagePublishDay,
			&i.PageFeatureImage,
			&i.PageTrash,
			&i.UserID,
			&i.TypeID,
			&i.TemplateID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPageByPublishYearMonth = `-- name: GetPageByPublishYearMonth :many
select page_id, page_title, page_slug, page_content, page_description, page_status, page_publish_year, page_publish_month, page_publish_day, page_feature_image, page_trash, user_id, type_id, template_id, created_at, updated_at from tb_page where page_publish_year = ? and page_publish_month = ? limit ? offset ?
`

type GetPageByPublishYearMonthParams struct {
	PagePublishYear  int32
	PagePublishMonth int32
	Limit            int32
	Offset           int32
}

func (q *Queries) GetPageByPublishYearMonth(ctx context.Context, arg GetPageByPublishYearMonthParams) ([]TbPage, error) {
	rows, err := q.db.QueryContext(ctx, getPageByPublishYearMonth,
		arg.PagePublishYear,
		arg.PagePublishMonth,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TbPage
	for rows.Next() {
		var i TbPage
		if err := rows.Scan(
			&i.PageID,
			&i.PageTitle,
			&i.PageSlug,
			&i.PageContent,
			&i.PageDescription,
			&i.PageStatus,
			&i.PagePublishYear,
			&i.PagePublishMonth,
			&i.PagePublishDay,
			&i.PageFeatureImage,
			&i.PageTrash,
			&i.UserID,
			&i.TypeID,
			&i.TemplateID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPageByPublishYearMonthDay = `-- name: GetPageByPublishYearMonthDay :many
select page_id, page_title, page_slug, page_content, page_description, page_status, page_publish_year, page_publish_month, page_publish_day, page_feature_image, page_trash, user_id, type_id, template_id, created_at, updated_at from tb_page where page_publish_year = ? and page_publish_month = ? and page_publish_day = ? limit ? offset ?
`

type GetPageByPublishYearMonthDayParams struct {
	PagePublishYear  int32
	PagePublishMonth int32
	PagePublishDay   int32
	Limit            int32
	Offset           int32
}

func (q *Queries) GetPageByPublishYearMonthDay(ctx context.Context, arg GetPageByPublishYearMonthDayParams) ([]TbPage, error) {
	rows, err := q.db.QueryContext(ctx, getPageByPublishYearMonthDay,
		arg.PagePublishYear,
		arg.PagePublishMonth,
		arg.PagePublishDay,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TbPage
	for rows.Next() {
		var i TbPage
		if err := rows.Scan(
			&i.PageID,
			&i.PageTitle,
			&i.PageSlug,
			&i.PageContent,
			&i.PageDescription,
			&i.PageStatus,
			&i.PagePublishYear,
			&i.PagePublishMonth,
			&i.PagePublishDay,
			&i.PageFeatureImage,
			&i.PageTrash,
			&i.UserID,
			&i.TypeID,
			&i.TemplateID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPageBySlug = `-- name: GetPageBySlug :one
select page_id, page_title, page_slug, page_content, page_description, page_status, page_publish_year, page_publish_month, page_publish_day, page_feature_image, page_trash, user_id, type_id, template_id, created_at, updated_at from tb_page where page_slug = ?
`

func (q *Queries) GetPageBySlug(ctx context.Context, pageSlug string) (TbPage, error) {
	row := q.db.QueryRowContext(ctx, getPageBySlug, pageSlug)
	var i TbPage
	err := row.Scan(
		&i.PageID,
		&i.PageTitle,
		&i.PageSlug,
		&i.PageContent,
		&i.PageDescription,
		&i.PageStatus,
		&i.PagePublishYear,
		&i.PagePublishMonth,
		&i.PagePublishDay,
		&i.PageFeatureImage,
		&i.PageTrash,
		&i.UserID,
		&i.TypeID,
		&i.TemplateID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPageByStatus = `-- name: GetPageByStatus :many
select page_id, page_title, page_slug, page_content, page_description, page_status, page_publish_year, page_publish_month, page_publish_day, page_feature_image, page_trash, user_id, type_id, template_id, created_at, updated_at from tb_page where page_status = ? limit ? offset ?
`

type GetPageByStatusParams struct {
	PageStatus int32
	Limit      int32
	Offset     int32
}

func (q *Queries) GetPageByStatus(ctx context.Context, arg GetPageByStatusParams) ([]TbPage, error) {
	rows, err := q.db.QueryContext(ctx, getPageByStatus, arg.PageStatus, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TbPage
	for rows.Next() {
		var i TbPage
		if err := rows.Scan(
			&i.PageID,
			&i.PageTitle,
			&i.PageSlug,
			&i.PageContent,
			&i.PageDescription,
			&i.PageStatus,
			&i.PagePublishYear,
			&i.PagePublishMonth,
			&i.PagePublishDay,
			&i.PageFeatureImage,
			&i.PageTrash,
			&i.UserID,
			&i.TypeID,
			&i.TemplateID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPageByTrash = `-- name: GetPageByTrash :many
select page_id, page_title, page_slug, page_content, page_description, page_status, page_publish_year, page_publish_month, page_publish_day, page_feature_image, page_trash, user_id, type_id, template_id, created_at, updated_at from tb_page where page_trash = ? limit ? offset ?
`

type GetPageByTrashParams struct {
	PageTrash int32
	Limit     int32
	Offset    int32
}

func (q *Queries) GetPageByTrash(ctx context.Context, arg GetPageByTrashParams) ([]TbPage, error) {
	rows, err := q.db.QueryContext(ctx, getPageByTrash, arg.PageTrash, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TbPage
	for rows.Next() {
		var i TbPage
		if err := rows.Scan(
			&i.PageID,
			&i.PageTitle,
			&i.PageSlug,
			&i.PageContent,
			&i.PageDescription,
			&i.PageStatus,
			&i.PagePublishYear,
			&i.PagePublishMonth,
			&i.PagePublishDay,
			&i.PageFeatureImage,
			&i.PageTrash,
			&i.UserID,
			&i.TypeID,
			&i.TemplateID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPageByType = `-- name: GetPageByType :many
select page_id, page_title, page_slug, page_content, page_description, page_status, page_publish_year, page_publish_month, page_publish_day, page_feature_image, page_trash, user_id, type_id, template_id, created_at, updated_at from tb_page where type_id = ? limit ? offset ?
`

type GetPageByTypeParams struct {
	TypeID int64
	Limit  int32
	Offset int32
}

func (q *Queries) GetPageByType(ctx context.Context, arg GetPageByTypeParams) ([]TbPage, error) {
	rows, err := q.db.QueryContext(ctx, getPageByType, arg.TypeID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TbPage
	for rows.Next() {
		var i TbPage
		if err := rows.Scan(
			&i.PageID,
			&i.PageTitle,
			&i.PageSlug,
			&i.PageContent,
			&i.PageDescription,
			&i.PageStatus,
			&i.PagePublishYear,
			&i.PagePublishMonth,
			&i.PagePublishDay,
			&i.PageFeatureImage,
			&i.PageTrash,
			&i.UserID,
			&i.TypeID,
			&i.TemplateID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPageByTypeNStatus = `-- name: GetPageByTypeNStatus :many
select page_id, page_title, page_slug, page_content, page_description, page_status, page_publish_year, page_publish_month, page_publish_day, page_feature_image, page_trash, user_id, type_id, template_id, created_at, updated_at from tb_page where type_id = ? and page_status = ? limit ? offset ?
`

type GetPageByTypeNStatusParams struct {
	TypeID     int64
	PageStatus int32
	Limit      int32
	Offset     int32
}

func (q *Queries) GetPageByTypeNStatus(ctx context.Context, arg GetPageByTypeNStatusParams) ([]TbPage, error) {
	rows, err := q.db.QueryContext(ctx, getPageByTypeNStatus,
		arg.TypeID,
		arg.PageStatus,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TbPage
	for rows.Next() {
		var i TbPage
		if err := rows.Scan(
			&i.PageID,
			&i.PageTitle,
			&i.PageSlug,
			&i.PageContent,
			&i.PageDescription,
			&i.PageStatus,
			&i.PagePublishYear,
			&i.PagePublishMonth,
			&i.PagePublishDay,
			&i.PageFeatureImage,
			&i.PageTrash,
			&i.UserID,
			&i.TypeID,
			&i.TemplateID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPageByUser = `-- name: GetPageByUser :many
select page_id, page_title, page_slug, page_content, page_description, page_status, page_publish_year, page_publish_month, page_publish_day, page_feature_image, page_trash, user_id, type_id, template_id, created_at, updated_at from tb_page where user_id = ? limit ? offset ?
`

type GetPageByUserParams struct {
	UserID int64
	Limit  int32
	Offset int32
}

func (q *Queries) GetPageByUser(ctx context.Context, arg GetPageByUserParams) ([]TbPage, error) {
	rows, err := q.db.QueryContext(ctx, getPageByUser, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TbPage
	for rows.Next() {
		var i TbPage
		if err := rows.Scan(
			&i.PageID,
			&i.PageTitle,
			&i.PageSlug,
			&i.PageContent,
			&i.PageDescription,
			&i.PageStatus,
			&i.PagePublishYear,
			&i.PagePublishMonth,
			&i.PagePublishDay,
			&i.PageFeatureImage,
			&i.PageTrash,
			&i.UserID,
			&i.TypeID,
			&i.TemplateID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePage = `-- name: UpdatePage :exec
update tb_page set
  page_title=?,
  page_slug=?,
  page_content=?,
  page_description=?,
  page_status=?,
  page_publish_year=?,
  page_publish_month=?,
  page_publish_day=?,
  page_feature_image=?,
  page_trash=?,
  user_id =?,
  type_id =?,
  template_id = ?,
  updated_at = ?
where page_id = ?
`

type UpdatePageParams struct {
	PageTitle        string
	PageSlug         string
	PageContent      string
	PageDescription  string
	PageStatus       int32
	PagePublishYear  int32
	PagePublishMonth int32
	PagePublishDay   int32
	PageFeatureImage int64
	PageTrash        int32
	UserID           int64
	TypeID           int64
	TemplateID       int32
	UpdatedAt        int64
	PageID           int64
}

func (q *Queries) UpdatePage(ctx context.Context, arg UpdatePageParams) error {
	_, err := q.db.ExecContext(ctx, updatePage,
		arg.PageTitle,
		arg.PageSlug,
		arg.PageContent,
		arg.PageDescription,
		arg.PageStatus,
		arg.PagePublishYear,
		arg.PagePublishMonth,
		arg.PagePublishDay,
		arg.PageFeatureImage,
		arg.PageTrash,
		arg.UserID,
		arg.TypeID,
		arg.TemplateID,
		arg.UpdatedAt,
		arg.PageID,
	)
	return err
}
