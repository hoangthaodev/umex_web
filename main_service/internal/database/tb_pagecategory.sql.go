// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: tb_pagecategory.sql

package database

import (
	"context"
)

const createNewPagecategory = `-- name: CreateNewPagecategory :exec
insert into tb_pagecategory (page_id, category_id, pagecategory_slug) values (?, ?,?)
`

type CreateNewPagecategoryParams struct {
	PageID           int64
	CategoryID       int64
	PagecategorySlug string
}

func (q *Queries) CreateNewPagecategory(ctx context.Context, arg CreateNewPagecategoryParams) error {
	_, err := q.db.ExecContext(ctx, createNewPagecategory, arg.PageID, arg.CategoryID, arg.PagecategorySlug)
	return err
}

const deletePagecategory = `-- name: DeletePagecategory :exec
delete from tb_pagecategory where pagecategory_id = ?
`

func (q *Queries) DeletePagecategory(ctx context.Context, pagecategoryID int64) error {
	_, err := q.db.ExecContext(ctx, deletePagecategory, pagecategoryID)
	return err
}

const getAllPagecategory = `-- name: GetAllPagecategory :many
select pagecategory_id, page_id, category_id, pagecategory_slug from tb_pagecategory
`

func (q *Queries) GetAllPagecategory(ctx context.Context) ([]TbPagecategory, error) {
	rows, err := q.db.QueryContext(ctx, getAllPagecategory)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TbPagecategory
	for rows.Next() {
		var i TbPagecategory
		if err := rows.Scan(
			&i.PagecategoryID,
			&i.PageID,
			&i.CategoryID,
			&i.PagecategorySlug,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPagecategoryByPage = `-- name: GetPagecategoryByPage :many
select pagecategory_id, page_id, category_id, pagecategory_slug from tb_pagecategory where page_id = ?
`

func (q *Queries) GetPagecategoryByPage(ctx context.Context, pageID int64) ([]TbPagecategory, error) {
	rows, err := q.db.QueryContext(ctx, getPagecategoryByPage, pageID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TbPagecategory
	for rows.Next() {
		var i TbPagecategory
		if err := rows.Scan(
			&i.PagecategoryID,
			&i.PageID,
			&i.CategoryID,
			&i.PagecategorySlug,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPagecategoryBySlug = `-- name: GetPagecategoryBySlug :one
select pagecategory_id, page_id, category_id, pagecategory_slug from tb_pagecategory where pagecategory_slug = ?
`

func (q *Queries) GetPagecategoryBySlug(ctx context.Context, pagecategorySlug string) (TbPagecategory, error) {
	row := q.db.QueryRowContext(ctx, getPagecategoryBySlug, pagecategorySlug)
	var i TbPagecategory
	err := row.Scan(
		&i.PagecategoryID,
		&i.PageID,
		&i.CategoryID,
		&i.PagecategorySlug,
	)
	return i, err
}

const getPagecategoryCategory = `-- name: GetPagecategoryCategory :many
select pagecategory_id, page_id, category_id, pagecategory_slug from tb_pagecategory where category_id = ?
`

func (q *Queries) GetPagecategoryCategory(ctx context.Context, categoryID int64) ([]TbPagecategory, error) {
	rows, err := q.db.QueryContext(ctx, getPagecategoryCategory, categoryID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TbPagecategory
	for rows.Next() {
		var i TbPagecategory
		if err := rows.Scan(
			&i.PagecategoryID,
			&i.PageID,
			&i.CategoryID,
			&i.PagecategorySlug,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
