// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: tb_pagecategory.sql

package database

import (
	"context"
)

const createNewPagecategory = `-- name: CreateNewPagecategory :exec
insert into tb_pagecategory (page_id, category_id) values (?, ?)
`

type CreateNewPagecategoryParams struct {
	PageID     int64
	CategoryID int64
}

func (q *Queries) CreateNewPagecategory(ctx context.Context, arg CreateNewPagecategoryParams) error {
	_, err := q.db.ExecContext(ctx, createNewPagecategory, arg.PageID, arg.CategoryID)
	return err
}

const deletePagecategory = `-- name: DeletePagecategory :exec
delete from tb_pagecategory where pagecategory_id = ?
`

func (q *Queries) DeletePagecategory(ctx context.Context, pagecategoryID int64) error {
	_, err := q.db.ExecContext(ctx, deletePagecategory, pagecategoryID)
	return err
}

const getCategoryByPage = `-- name: GetCategoryByPage :many
select category_id, category_name, category_slug, category_description, category_parent, type_id, created_at, updated_at from tb_category where category_id in(
select category_id from tb_pagecategory where page_id = ?)
`

func (q *Queries) GetCategoryByPage(ctx context.Context, pageID int64) ([]TbCategory, error) {
	rows, err := q.db.QueryContext(ctx, getCategoryByPage, pageID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TbCategory
	for rows.Next() {
		var i TbCategory
		if err := rows.Scan(
			&i.CategoryID,
			&i.CategoryName,
			&i.CategorySlug,
			&i.CategoryDescription,
			&i.CategoryParent,
			&i.TypeID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPageByCategory = `-- name: GetPageByCategory :many
select page_id, page_title, page_slug, page_content, page_description, page_status, page_publish_year, page_publish_month, page_publish_day, page_feature_image, page_trash, user_id, type_id, template_id, created_at, updated_at from tb_page where page_id in(
select page_id from tb_pagecategory where category_id = ?) limit ? offset ?
`

type GetPageByCategoryParams struct {
	CategoryID int64
	Limit      int32
	Offset     int32
}

func (q *Queries) GetPageByCategory(ctx context.Context, arg GetPageByCategoryParams) ([]TbPage, error) {
	rows, err := q.db.QueryContext(ctx, getPageByCategory, arg.CategoryID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TbPage
	for rows.Next() {
		var i TbPage
		if err := rows.Scan(
			&i.PageID,
			&i.PageTitle,
			&i.PageSlug,
			&i.PageContent,
			&i.PageDescription,
			&i.PageStatus,
			&i.PagePublishYear,
			&i.PagePublishMonth,
			&i.PagePublishDay,
			&i.PageFeatureImage,
			&i.PageTrash,
			&i.UserID,
			&i.TypeID,
			&i.TemplateID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
