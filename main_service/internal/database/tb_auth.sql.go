// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: tb_auth.sql

package database

import (
	"context"
)

const createNewAuth = `-- name: CreateNewAuth :exec
insert into tb_auth (user_id, role_id, created_at) values(?,?,?)
`

type CreateNewAuthParams struct {
	UserID    int64
	RoleID    int32
	CreatedAt int64
}

func (q *Queries) CreateNewAuth(ctx context.Context, arg CreateNewAuthParams) error {
	_, err := q.db.ExecContext(ctx, createNewAuth, arg.UserID, arg.RoleID, arg.CreatedAt)
	return err
}

const deleteAuth = `-- name: DeleteAuth :exec
delete from tb_auth where auth_id = ?
`

func (q *Queries) DeleteAuth(ctx context.Context, authID int64) error {
	_, err := q.db.ExecContext(ctx, deleteAuth, authID)
	return err
}

const getAuthById = `-- name: GetAuthById :one
select auth_id, user_id, role_id, created_at, updated_at from tb_auth where auth_id = ?
`

func (q *Queries) GetAuthById(ctx context.Context, authID int64) (TbAuth, error) {
	row := q.db.QueryRowContext(ctx, getAuthById, authID)
	var i TbAuth
	err := row.Scan(
		&i.AuthID,
		&i.UserID,
		&i.RoleID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAuthByUserId = `-- name: GetAuthByUserId :one
select auth_id, user_id, role_id, created_at, updated_at from tb_auth where user_id = ?
`

func (q *Queries) GetAuthByUserId(ctx context.Context, userID int64) (TbAuth, error) {
	row := q.db.QueryRowContext(ctx, getAuthByUserId, userID)
	var i TbAuth
	err := row.Scan(
		&i.AuthID,
		&i.UserID,
		&i.RoleID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateAuth = `-- name: UpdateAuth :exec
update tb_auth set role_id = ?, updated_at = ? where auth_id = ?
`

type UpdateAuthParams struct {
	RoleID    int32
	UpdatedAt int64
	AuthID    int64
}

func (q *Queries) UpdateAuth(ctx context.Context, arg UpdateAuthParams) error {
	_, err := q.db.ExecContext(ctx, updateAuth, arg.RoleID, arg.UpdatedAt, arg.AuthID)
	return err
}
