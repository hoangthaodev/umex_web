// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: tb_menu_location.sql

package database

import (
	"context"
)

const getAllLocation = `-- name: GetAllLocation :many
select location_id, location_name, menu_id from tb_menu_location
`

func (q *Queries) GetAllLocation(ctx context.Context) ([]TbMenuLocation, error) {
	rows, err := q.db.QueryContext(ctx, getAllLocation)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TbMenuLocation
	for rows.Next() {
		var i TbMenuLocation
		if err := rows.Scan(&i.LocationID, &i.LocationName, &i.MenuID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLocationById = `-- name: GetLocationById :one
select location_id, location_name, menu_id from tb_menu_location where location_id = ?
`

func (q *Queries) GetLocationById(ctx context.Context, locationID int64) (TbMenuLocation, error) {
	row := q.db.QueryRowContext(ctx, getLocationById, locationID)
	var i TbMenuLocation
	err := row.Scan(&i.LocationID, &i.LocationName, &i.MenuID)
	return i, err
}

const getLocationByMenuId = `-- name: GetLocationByMenuId :many
select location_id, location_name, menu_id from tb_menu_location where menu_id = ?
`

func (q *Queries) GetLocationByMenuId(ctx context.Context, menuID int64) ([]TbMenuLocation, error) {
	rows, err := q.db.QueryContext(ctx, getLocationByMenuId, menuID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TbMenuLocation
	for rows.Next() {
		var i TbMenuLocation
		if err := rows.Scan(&i.LocationID, &i.LocationName, &i.MenuID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMenuLocation = `-- name: UpdateMenuLocation :exec
update tb_menu_location set menu_id = ? where location_id = ?
`

type UpdateMenuLocationParams struct {
	MenuID     int64
	LocationID int64
}

func (q *Queries) UpdateMenuLocation(ctx context.Context, arg UpdateMenuLocationParams) error {
	_, err := q.db.ExecContext(ctx, updateMenuLocation, arg.MenuID, arg.LocationID)
	return err
}
