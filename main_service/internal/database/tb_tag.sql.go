// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: tb_tag.sql

package database

import (
	"context"
)

const createNewTag = `-- name: CreateNewTag :exec
insert into tb_tag(tag_name, tag_slug, tag_description, type_id, created_at)
values(?,?,?,?,?)
`

type CreateNewTagParams struct {
	TagName        string
	TagSlug        string
	TagDescription string
	TypeID         int64
	CreatedAt      int64
}

func (q *Queries) CreateNewTag(ctx context.Context, arg CreateNewTagParams) error {
	_, err := q.db.ExecContext(ctx, createNewTag,
		arg.TagName,
		arg.TagSlug,
		arg.TagDescription,
		arg.TypeID,
		arg.CreatedAt,
	)
	return err
}

const deleteTag = `-- name: DeleteTag :exec
delete from tb_tag where tag_id = ?
`

func (q *Queries) DeleteTag(ctx context.Context, tagID int64) error {
	_, err := q.db.ExecContext(ctx, deleteTag, tagID)
	return err
}

const getAllTag = `-- name: GetAllTag :many
select tag_id, tag_name, tag_slug, tag_description, type_id, created_at, updated_at from tb_tag
`

func (q *Queries) GetAllTag(ctx context.Context) ([]TbTag, error) {
	rows, err := q.db.QueryContext(ctx, getAllTag)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TbTag
	for rows.Next() {
		var i TbTag
		if err := rows.Scan(
			&i.TagID,
			&i.TagName,
			&i.TagSlug,
			&i.TagDescription,
			&i.TypeID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTagById = `-- name: GetTagById :one
select tag_id, tag_name, tag_slug, tag_description, type_id, created_at, updated_at from tb_tag where tag_id = ?
`

func (q *Queries) GetTagById(ctx context.Context, tagID int64) (TbTag, error) {
	row := q.db.QueryRowContext(ctx, getTagById, tagID)
	var i TbTag
	err := row.Scan(
		&i.TagID,
		&i.TagName,
		&i.TagSlug,
		&i.TagDescription,
		&i.TypeID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTagBySlug = `-- name: GetTagBySlug :one
select tag_id, tag_name, tag_slug, tag_description, type_id, created_at, updated_at from tb_tag where tag_slug = ?
`

func (q *Queries) GetTagBySlug(ctx context.Context, tagSlug string) (TbTag, error) {
	row := q.db.QueryRowContext(ctx, getTagBySlug, tagSlug)
	var i TbTag
	err := row.Scan(
		&i.TagID,
		&i.TagName,
		&i.TagSlug,
		&i.TagDescription,
		&i.TypeID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTagByType = `-- name: GetTagByType :many
select tag_id, tag_name, tag_slug, tag_description, type_id, created_at, updated_at from tb_tag where type_id = ?
`

func (q *Queries) GetTagByType(ctx context.Context, typeID int64) ([]TbTag, error) {
	rows, err := q.db.QueryContext(ctx, getTagByType, typeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TbTag
	for rows.Next() {
		var i TbTag
		if err := rows.Scan(
			&i.TagID,
			&i.TagName,
			&i.TagSlug,
			&i.TagDescription,
			&i.TypeID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTag = `-- name: UpdateTag :exec
update tb_tag set tag_name = ?, tag_slug = ?, tag_description = ?, type_id = ?, updated_at =? where tag_id = ?
`

type UpdateTagParams struct {
	TagName        string
	TagSlug        string
	TagDescription string
	TypeID         int64
	UpdatedAt      int64
	TagID          int64
}

func (q *Queries) UpdateTag(ctx context.Context, arg UpdateTagParams) error {
	_, err := q.db.ExecContext(ctx, updateTag,
		arg.TagName,
		arg.TagSlug,
		arg.TagDescription,
		arg.TypeID,
		arg.UpdatedAt,
		arg.TagID,
	)
	return err
}
