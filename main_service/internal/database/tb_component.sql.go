// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: tb_component.sql

package database

import (
	"context"
)

const createNewComponent = `-- name: CreateNewComponent :exec
insert into tb_component (comp_name, comp_position, comp_index) values (?,?,?)
`

type CreateNewComponentParams struct {
	CompName     string
	CompPosition int32
	CompIndex    int32
}

func (q *Queries) CreateNewComponent(ctx context.Context, arg CreateNewComponentParams) error {
	_, err := q.db.ExecContext(ctx, createNewComponent, arg.CompName, arg.CompPosition, arg.CompIndex)
	return err
}

const deleteComponent = `-- name: DeleteComponent :exec
delete from tb_component where comp_id = ?
`

func (q *Queries) DeleteComponent(ctx context.Context, compID int64) error {
	_, err := q.db.ExecContext(ctx, deleteComponent, compID)
	return err
}

const getAllComponent = `-- name: GetAllComponent :many
select comp_id, comp_name, comp_position, comp_index from tb_component
`

func (q *Queries) GetAllComponent(ctx context.Context) ([]TbComponent, error) {
	rows, err := q.db.QueryContext(ctx, getAllComponent)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TbComponent
	for rows.Next() {
		var i TbComponent
		if err := rows.Scan(
			&i.CompID,
			&i.CompName,
			&i.CompPosition,
			&i.CompIndex,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getComponentById = `-- name: GetComponentById :one
select comp_id, comp_name, comp_position, comp_index from tb_component where comp_id = ?
`

func (q *Queries) GetComponentById(ctx context.Context, compID int64) (TbComponent, error) {
	row := q.db.QueryRowContext(ctx, getComponentById, compID)
	var i TbComponent
	err := row.Scan(
		&i.CompID,
		&i.CompName,
		&i.CompPosition,
		&i.CompIndex,
	)
	return i, err
}

const getComponentByName = `-- name: GetComponentByName :one
select comp_id, comp_name, comp_position, comp_index from tb_component where comp_name = ?
`

func (q *Queries) GetComponentByName(ctx context.Context, compName string) (TbComponent, error) {
	row := q.db.QueryRowContext(ctx, getComponentByName, compName)
	var i TbComponent
	err := row.Scan(
		&i.CompID,
		&i.CompName,
		&i.CompPosition,
		&i.CompIndex,
	)
	return i, err
}

const getComponentByPosition = `-- name: GetComponentByPosition :many
select comp_id, comp_name, comp_position, comp_index from tb_component where comp_position = ?
`

func (q *Queries) GetComponentByPosition(ctx context.Context, compPosition int32) ([]TbComponent, error) {
	rows, err := q.db.QueryContext(ctx, getComponentByPosition, compPosition)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TbComponent
	for rows.Next() {
		var i TbComponent
		if err := rows.Scan(
			&i.CompID,
			&i.CompName,
			&i.CompPosition,
			&i.CompIndex,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateComponent = `-- name: UpdateComponent :exec
update tb_component set comp_name = ?, comp_position = ?, comp_index = ? where comp_id = ?
`

type UpdateComponentParams struct {
	CompName     string
	CompPosition int32
	CompIndex    int32
	CompID       int64
}

func (q *Queries) UpdateComponent(ctx context.Context, arg UpdateComponentParams) error {
	_, err := q.db.ExecContext(ctx, updateComponent,
		arg.CompName,
		arg.CompPosition,
		arg.CompIndex,
		arg.CompID,
	)
	return err
}
