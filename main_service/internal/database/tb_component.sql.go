// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: tb_component.sql

package database

import (
	"context"
)

const createNewComponent = `-- name: CreateNewComponent :exec
insert into tb_component (component_name, component_position, component_index, component_map) values (?,?,?,?)
`

type CreateNewComponentParams struct {
	ComponentName     string
	ComponentPosition int32
	ComponentIndex    int32
	ComponentMap      string
}

func (q *Queries) CreateNewComponent(ctx context.Context, arg CreateNewComponentParams) error {
	_, err := q.db.ExecContext(ctx, createNewComponent,
		arg.ComponentName,
		arg.ComponentPosition,
		arg.ComponentIndex,
		arg.ComponentMap,
	)
	return err
}

const deleteComponent = `-- name: DeleteComponent :exec
delete from tb_component where component_id = ?
`

func (q *Queries) DeleteComponent(ctx context.Context, componentID int64) error {
	_, err := q.db.ExecContext(ctx, deleteComponent, componentID)
	return err
}

const getAllComponent = `-- name: GetAllComponent :many
select component_id, component_name, component_position, component_index, component_map from tb_component
`

func (q *Queries) GetAllComponent(ctx context.Context) ([]TbComponent, error) {
	rows, err := q.db.QueryContext(ctx, getAllComponent)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TbComponent
	for rows.Next() {
		var i TbComponent
		if err := rows.Scan(
			&i.ComponentID,
			&i.ComponentName,
			&i.ComponentPosition,
			&i.ComponentIndex,
			&i.ComponentMap,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getComponentById = `-- name: GetComponentById :one
select component_id, component_name, component_position, component_index, component_map from tb_component where component_id = ?
`

func (q *Queries) GetComponentById(ctx context.Context, componentID int64) (TbComponent, error) {
	row := q.db.QueryRowContext(ctx, getComponentById, componentID)
	var i TbComponent
	err := row.Scan(
		&i.ComponentID,
		&i.ComponentName,
		&i.ComponentPosition,
		&i.ComponentIndex,
		&i.ComponentMap,
	)
	return i, err
}

const getComponentByName = `-- name: GetComponentByName :one
select component_id, component_name, component_position, component_index, component_map from tb_component where component_name = ?
`

func (q *Queries) GetComponentByName(ctx context.Context, componentName string) (TbComponent, error) {
	row := q.db.QueryRowContext(ctx, getComponentByName, componentName)
	var i TbComponent
	err := row.Scan(
		&i.ComponentID,
		&i.ComponentName,
		&i.ComponentPosition,
		&i.ComponentIndex,
		&i.ComponentMap,
	)
	return i, err
}

const getComponentByPosition = `-- name: GetComponentByPosition :many
select component_id, component_name, component_position, component_index, component_map from tb_component where component_position = ?
`

func (q *Queries) GetComponentByPosition(ctx context.Context, componentPosition int32) ([]TbComponent, error) {
	rows, err := q.db.QueryContext(ctx, getComponentByPosition, componentPosition)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TbComponent
	for rows.Next() {
		var i TbComponent
		if err := rows.Scan(
			&i.ComponentID,
			&i.ComponentName,
			&i.ComponentPosition,
			&i.ComponentIndex,
			&i.ComponentMap,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateComponent = `-- name: UpdateComponent :exec
update tb_component set component_name = ?, component_position = ?, component_index = ? where component_id = ?
`

type UpdateComponentParams struct {
	ComponentName     string
	ComponentPosition int32
	ComponentIndex    int32
	ComponentID       int64
}

func (q *Queries) UpdateComponent(ctx context.Context, arg UpdateComponentParams) error {
	_, err := q.db.ExecContext(ctx, updateComponent,
		arg.ComponentName,
		arg.ComponentPosition,
		arg.ComponentIndex,
		arg.ComponentID,
	)
	return err
}
