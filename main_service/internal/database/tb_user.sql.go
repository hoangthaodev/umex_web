// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: tb_user.sql

package database

import (
	"context"
)

const createNewUser = `-- name: CreateNewUser :exec
insert into tb_user (user_name, user_password, user_email, user_active, user_display_name, created_at) values(?, ?,?,?,?,?)
`

type CreateNewUserParams struct {
	UserName        string
	UserPassword    string
	UserEmail       string
	UserActive      int32
	UserDisplayName string
	CreatedAt       int64
}

func (q *Queries) CreateNewUser(ctx context.Context, arg CreateNewUserParams) error {
	_, err := q.db.ExecContext(ctx, createNewUser,
		arg.UserName,
		arg.UserPassword,
		arg.UserEmail,
		arg.UserActive,
		arg.UserDisplayName,
		arg.CreatedAt,
	)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
delete from tb_user where user_id = ?
`

func (q *Queries) DeleteUser(ctx context.Context, userID int64) error {
	_, err := q.db.ExecContext(ctx, deleteUser, userID)
	return err
}

const getAllUser = `-- name: GetAllUser :many
select user_id, user_name, user_display_name, user_password, user_email, user_active, created_at, updated_at from tb_user
`

func (q *Queries) GetAllUser(ctx context.Context) ([]TbUser, error) {
	rows, err := q.db.QueryContext(ctx, getAllUser)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TbUser
	for rows.Next() {
		var i TbUser
		if err := rows.Scan(
			&i.UserID,
			&i.UserName,
			&i.UserDisplayName,
			&i.UserPassword,
			&i.UserEmail,
			&i.UserActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByEmail = `-- name: GetUserByEmail :one
select user_id, user_name, user_display_name, user_password, user_email, user_active, created_at, updated_at from tb_user where user_email = ?
`

func (q *Queries) GetUserByEmail(ctx context.Context, userEmail string) (TbUser, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, userEmail)
	var i TbUser
	err := row.Scan(
		&i.UserID,
		&i.UserName,
		&i.UserDisplayName,
		&i.UserPassword,
		&i.UserEmail,
		&i.UserActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
select user_id, user_name, user_display_name, user_password, user_email, user_active, created_at, updated_at from tb_user where user_id = ?
`

func (q *Queries) GetUserById(ctx context.Context, userID int64) (TbUser, error) {
	row := q.db.QueryRowContext(ctx, getUserById, userID)
	var i TbUser
	err := row.Scan(
		&i.UserID,
		&i.UserName,
		&i.UserDisplayName,
		&i.UserPassword,
		&i.UserEmail,
		&i.UserActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
select user_id, user_name, user_display_name, user_password, user_email, user_active, created_at, updated_at from tb_user where user_name = ?
`

func (q *Queries) GetUserByUsername(ctx context.Context, userName string) (TbUser, error) {
	row := q.db.QueryRowContext(ctx, getUserByUsername, userName)
	var i TbUser
	err := row.Scan(
		&i.UserID,
		&i.UserName,
		&i.UserDisplayName,
		&i.UserPassword,
		&i.UserEmail,
		&i.UserActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :exec
update tb_user set user_name = ?, user_password = ?, user_email = ?, user_active = ?, user_display_name = ?, updated_at = ? where user_id = ?
`

type UpdateUserParams struct {
	UserName        string
	UserPassword    string
	UserEmail       string
	UserActive      int32
	UserDisplayName string
	UpdatedAt       int64
	UserID          int64
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser,
		arg.UserName,
		arg.UserPassword,
		arg.UserEmail,
		arg.UserActive,
		arg.UserDisplayName,
		arg.UpdatedAt,
		arg.UserID,
	)
	return err
}
