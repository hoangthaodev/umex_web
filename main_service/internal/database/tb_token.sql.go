// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: tb_token.sql

package database

import (
	"context"
)

const createNewToken = `-- name: CreateNewToken :exec
insert into tb_token (user_id, refresh_token, expired_token, created_at) values(?,?,?,?)
`

type CreateNewTokenParams struct {
	UserID       int64
	RefreshToken string
	ExpiredToken int64
	CreatedAt    int64
}

func (q *Queries) CreateNewToken(ctx context.Context, arg CreateNewTokenParams) error {
	_, err := q.db.ExecContext(ctx, createNewToken,
		arg.UserID,
		arg.RefreshToken,
		arg.ExpiredToken,
		arg.CreatedAt,
	)
	return err
}

const deleteToken = `-- name: DeleteToken :exec
delete from tb_token where token_id = ?
`

func (q *Queries) DeleteToken(ctx context.Context, tokenID int64) error {
	_, err := q.db.ExecContext(ctx, deleteToken, tokenID)
	return err
}

const getTokenById = `-- name: GetTokenById :one
select token_id, user_id, refresh_token, expired_token, created_at, updated_at from tb_token where token_id = ?
`

func (q *Queries) GetTokenById(ctx context.Context, tokenID int64) (TbToken, error) {
	row := q.db.QueryRowContext(ctx, getTokenById, tokenID)
	var i TbToken
	err := row.Scan(
		&i.TokenID,
		&i.UserID,
		&i.RefreshToken,
		&i.ExpiredToken,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTokenByUserId = `-- name: GetTokenByUserId :one
select token_id, user_id, refresh_token, expired_token, created_at, updated_at from tb_token where user_id = ?
`

func (q *Queries) GetTokenByUserId(ctx context.Context, userID int64) (TbToken, error) {
	row := q.db.QueryRowContext(ctx, getTokenByUserId, userID)
	var i TbToken
	err := row.Scan(
		&i.TokenID,
		&i.UserID,
		&i.RefreshToken,
		&i.ExpiredToken,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateToken = `-- name: UpdateToken :exec
update tb_token set refresh_token = ?, expired_token = ?, updated_at = ? where token_id = ?
`

type UpdateTokenParams struct {
	RefreshToken string
	ExpiredToken int64
	UpdatedAt    int64
	TokenID      int64
}

func (q *Queries) UpdateToken(ctx context.Context, arg UpdateTokenParams) error {
	_, err := q.db.ExecContext(ctx, updateToken,
		arg.RefreshToken,
		arg.ExpiredToken,
		arg.UpdatedAt,
		arg.TokenID,
	)
	return err
}
