// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: tb_config.sql

package database

import (
	"context"
)

const createNewConfig = `-- name: CreateNewConfig :exec
insert into tb_config (config_key, config_value, config_style) values (?, ?, ?)
`

type CreateNewConfigParams struct {
	ConfigKey   string
	ConfigValue string
	ConfigStyle string
}

func (q *Queries) CreateNewConfig(ctx context.Context, arg CreateNewConfigParams) error {
	_, err := q.db.ExecContext(ctx, createNewConfig, arg.ConfigKey, arg.ConfigValue, arg.ConfigStyle)
	return err
}

const deleteConfig = `-- name: DeleteConfig :exec
delete from tb_config where config_id = ?
`

func (q *Queries) DeleteConfig(ctx context.Context, configID int64) error {
	_, err := q.db.ExecContext(ctx, deleteConfig, configID)
	return err
}

const getAllConfig = `-- name: GetAllConfig :many
select config_id, config_key, config_value, config_style from tb_config
`

func (q *Queries) GetAllConfig(ctx context.Context) ([]TbConfig, error) {
	rows, err := q.db.QueryContext(ctx, getAllConfig)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TbConfig
	for rows.Next() {
		var i TbConfig
		if err := rows.Scan(
			&i.ConfigID,
			&i.ConfigKey,
			&i.ConfigValue,
			&i.ConfigStyle,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getConfigById = `-- name: GetConfigById :one
select config_id, config_key, config_value, config_style from tb_config where config_id = ?
`

func (q *Queries) GetConfigById(ctx context.Context, configID int64) (TbConfig, error) {
	row := q.db.QueryRowContext(ctx, getConfigById, configID)
	var i TbConfig
	err := row.Scan(
		&i.ConfigID,
		&i.ConfigKey,
		&i.ConfigValue,
		&i.ConfigStyle,
	)
	return i, err
}

const getConfigByKey = `-- name: GetConfigByKey :one
select config_id, config_key, config_value, config_style from tb_config where config_key = ?
`

func (q *Queries) GetConfigByKey(ctx context.Context, configKey string) (TbConfig, error) {
	row := q.db.QueryRowContext(ctx, getConfigByKey, configKey)
	var i TbConfig
	err := row.Scan(
		&i.ConfigID,
		&i.ConfigKey,
		&i.ConfigValue,
		&i.ConfigStyle,
	)
	return i, err
}

const updateConfig = `-- name: UpdateConfig :exec
update tb_config set config_key =?, config_value = ?, config_style = ? where config_id = ?
`

type UpdateConfigParams struct {
	ConfigKey   string
	ConfigValue string
	ConfigStyle string
	ConfigID    int64
}

func (q *Queries) UpdateConfig(ctx context.Context, arg UpdateConfigParams) error {
	_, err := q.db.ExecContext(ctx, updateConfig,
		arg.ConfigKey,
		arg.ConfigValue,
		arg.ConfigStyle,
		arg.ConfigID,
	)
	return err
}
