// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: tb_type.sql

package database

import (
	"context"
)

const createNewType = `-- name: CreateNewType :exec
INSERT INTO tb_type (type_name) VALUES (?)
`

func (q *Queries) CreateNewType(ctx context.Context, typeName string) error {
	_, err := q.db.ExecContext(ctx, createNewType, typeName)
	return err
}

const deleteType = `-- name: DeleteType :exec
DELETE FROM tb_type WHERE type_id = ?
`

func (q *Queries) DeleteType(ctx context.Context, typeID int64) error {
	_, err := q.db.ExecContext(ctx, deleteType, typeID)
	return err
}

const getAllType = `-- name: GetAllType :many
select type_id, type_name from tb_type
`

func (q *Queries) GetAllType(ctx context.Context) ([]TbType, error) {
	rows, err := q.db.QueryContext(ctx, getAllType)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TbType
	for rows.Next() {
		var i TbType
		if err := rows.Scan(&i.TypeID, &i.TypeName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTypeById = `-- name: GetTypeById :one
select type_id, type_name from tb_type where type_id = ?
`

func (q *Queries) GetTypeById(ctx context.Context, typeID int64) (TbType, error) {
	row := q.db.QueryRowContext(ctx, getTypeById, typeID)
	var i TbType
	err := row.Scan(&i.TypeID, &i.TypeName)
	return i, err
}

const updateType = `-- name: UpdateType :exec
UPDATE tb_type SET type_name = ? WHERE type_id = ?
`

type UpdateTypeParams struct {
	TypeName string
	TypeID   int64
}

func (q *Queries) UpdateType(ctx context.Context, arg UpdateTypeParams) error {
	_, err := q.db.ExecContext(ctx, updateType, arg.TypeName, arg.TypeID)
	return err
}
